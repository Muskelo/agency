openapi: 3.1.0
info:
  title: agency
  version: '1.0'
  description: ''
servers:
  - url: 'http://localhost:8080/api'
paths:
  '/user/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User
      responses:
        '200':
          $ref: '#/components/responses/User'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-users-userId
      description: 'Return user by id, return current if userId=-1'
    patch:
      summary: Update User
      operationId: patch-users-userId
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      description: ''
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    login:
                      type: string
                    password:
                      type: string
                    number:
                      type: string
              required:
                - data
            examples:
              Update user:
                value:
                  data:
                    login: string
                    password: string
                    number: '9999999999'
        description: Patch user properties to update.
  /users:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          $ref: '#/components/responses/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - login
                    - password
                    - number
                  properties:
                    login:
                      type: string
                    password:
                      type: string
                    number:
                      type: string
              required:
                - data
            examples: {}
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      security:
        - HTTPAuth: []
    parameters: []
  '/item/{itemId}':
    parameters:
      - schema:
          type: string
        name: itemId
        in: path
        required: true
    get:
      summary: Get Item
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/Item'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-items-itemId
      description: ''
    patch:
      summary: Update Item
      operationId: patch-items-itemId
      responses:
        '200':
          $ref: '#/components/responses/Item'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  data:
                    size: 0
                    price: 0
                    rooms: 0
                    floor: 0
                    total_floor: 0
                    type: string
                    city: string
                    address: string
                    description: string
                    images_id:
                      - 0
              properties:
                data:
                  type: object
                  properties:
                    size:
                      type: number
                    price:
                      type: number
                    rooms:
                      type: number
                    floor:
                      type: number
                    total_floor:
                      type: number
                    type:
                      type: string
                    city:
                      type: string
                    address:
                      type: string
                    description:
                      type: string
                    images_id:
                      type: array
                      items:
                        type: integer
              required:
                - data
    delete:
      summary: Delete Item
      operationId: delete-items-itemId
      responses:
        '200':
          $ref: '#/components/responses/Item'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
  /items:
    get:
      summary: Get list of Items
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/ItemsList'
      operationId: get-items
      description: Return items list
      parameters:
        - schema:
            type: string
          in: query
          name: offset
        - schema:
            type: string
          in: query
          name: limit
        - schema:
            type: string
          in: query
          name: search
          description: Search by address or sity
    parameters: []
    post:
      summary: Create new Item
      operationId: post-items
      responses:
        '200':
          $ref: '#/components/responses/Item'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '409':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  data:
                    id: 0
                    size: 0
                    price: 0
                    rooms: 0
                    floor: 0
                    total_floor: 0
                    type: string
                    city: string
                    address: string
                    description: string
                    images_id:
                      - 0
              properties:
                data:
                  type: object
                  required:
                    - size
                    - price
                    - rooms
                    - floor
                    - total_floor
                    - type
                    - city
                    - address
                    - description
                    - images_id
                  properties:
                    size:
                      type: number
                    price:
                      type: number
                    rooms:
                      type: number
                    floor:
                      type: number
                    total_floor:
                      type: number
                    type:
                      type: string
                    city:
                      type: string
                    address:
                      type: string
                    description:
                      type: string
                    images_id:
                      type: array
                      items:
                        type: integer
              required:
                - data
            examples:
              example-1:
                value:
                  data:
                    size: 0
                    price: 0
                    rooms: 0
                    floor: 0
                    total_floor: 0
                    type: string
                    city: string
                    address: string
                    description: string
                    images_id:
                      - 0
      description: ''
  /images:
    post:
      summary: Upload Image
      operationId: post-images
      responses:
        '200':
          $ref: '#/components/responses/Image'
        '400':
          $ref: '#/components/responses/OrdersList'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties: {}
        description: Request must include image
      parameters: []
      description: 'Upload image, and return image info'
    get:
      summary: Get list of Images
      operationId: get-images
      responses:
        '200':
          $ref: '#/components/responses/ImagesList'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
      parameters:
        - schema:
            type: string
            default: current_user.id
          in: query
          name: user_id
      description: 'Default return images that belongs current user, but without item_id '
  '/order/{orderId}':
    parameters:
      - schema:
          type: string
        name: orderId
        in: path
        required: true
    patch:
      summary: Update Order
      operationId: patch-order-orderId
      responses:
        '200':
          $ref: '#/components/responses/Order'
        '400':
          $ref: '#/components/responses/Error'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    status:
                      type: string
              required:
                - data
            examples: {}
  /orders:
    get:
      summary: Get list of Orders
      tags: []
      responses:
        '200':
          $ref: '#/components/responses/OrdersList'
        '401':
          $ref: '#/components/responses/Error'
        '403':
          $ref: '#/components/responses/Error'
        '404':
          $ref: '#/components/responses/Error'
      operationId: get-orders
      parameters:
        - schema:
            type: string
          in: query
          name: item_id
          required: true
      description: ''
    post:
      summary: Create order
      operationId: post-orders
      responses:
        '200':
          $ref: '#/components/responses/Order'
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: object
                  required:
                    - item_id
                  properties:
                    item_id:
                      type: integer
              required:
                - data
            examples:
              example-1:
                value:
                  data:
                    item_id: 0
        description: ''
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 1
          login: muskelo
          number: admin
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        login:
          type: string
        number:
          type: string
          description: 'owner, moder or admin role required'
        role:
          type: string
      required:
        - id
        - login
    Item:
      title: Item
      type: object
      examples:
        - id: 0
          size: 0
          price: 0
          rooms: 0
          floor: 0
          total_floor: 0
          type: string
          city: string
          address: string
          description: string
          images_id:
            - 0
          images:
            - id: 0
              url: string
              user_id: 0
              item_id: 0
      properties:
        id:
          type: integer
        size:
          type: integer
        price:
          type: integer
        rooms:
          type: integer
        floor:
          type: integer
        total_floor:
          type: integer
        type:
          type: string
        city:
          type: string
        address:
          type: string
        description:
          type: string
        images_id:
          type: array
          items:
            type: integer
        images:
          type: array
          items:
            $ref: '#/components/schemas/Image'
      required:
        - id
        - size
        - price
        - rooms
        - floor
        - total_floor
        - type
        - city
        - address
        - description
        - images_id
        - images
    Image:
      title: Image
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
        user_id:
          type: integer
        item_id:
          type: integer
      required:
        - id
        - url
        - user_id
    Order:
      title: Order
      type: object
      examples:
        - id: 0
          datetime: string
          status: string
          user:
            id: 0
            login: string
            number: string
      properties:
        id:
          type: integer
        created:
          type: string
          format: date-time
        status:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - id
        - created
        - status
        - user
  securitySchemes:
    HTTPAuth:
      type: http
      scheme: basic
      description: ''
  responses:
    Error:
      description: Base error response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            Error:
              value:
                message: string
    User:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/User'
          examples:
            Get User:
              value:
                data:
                  id: 0
                  login: string
                  number: string
    UsersList:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          examples:
            Get users list:
              value:
                data:
                  - id: 0
                    login: string
                    number: '89999999998'
                  - id: 1
                    login: string1
                    number: '89999999999'
    ValidationError:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              errors:
                type: array
                items:
                  type: object
                  properties:
                    loc:
                      type: string
                    message:
                      type: string
          examples:
            ValidationError:
              value:
                message: string
                errors:
                  - loc: string
                    message: string
    ItemsList:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
          examples: {}
    Item:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Item'
          examples: {}
    Image:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Image'
          examples: {}
    ImagesList:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Image'
          examples:
            example-1:
              value:
                data:
                  - id: 0
                    url: string
                    user_id: 0
                    item_id: 0
    OrdersList:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
          examples: {}
    Order:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: '#/components/schemas/Order'
          examples:
            example-1:
              value:
                data:
                  id: 0
                  datetime: string
                  status: string
                  user:
                    id: 0
                    login: string
                    number: string
  parameters: {}
security:
  - HTTPAuth: []
